{"name":"Yii2-phar","tagline":"Phar builder based on Yii2","body":"yii2-phar\r\n========\r\n\r\n[![Build Status](https://travis-ci.org/index0h/yii2-phar.png?branch=master)](https://travis-ci.org/index0h/yii2-phar) [![Latest Stable Version](https://poser.pugx.org/index0h/yii2-phar/v/stable.png)](https://packagist.org/packages/index0h/yii2-phar) [![Dependency Status](https://gemnasium.com/index0h/yii2-phar.png)](https://gemnasium.com/index0h/yii2-phar) [![Scrutinizer Quality Score](https://scrutinizer-ci.com/g/index0h/yii2-phar/badges/quality-score.png?s=646499f8cfca4630130df1b879f36d4be735cb71)](https://scrutinizer-ci.com/g/index0h/yii2-phar/) [![Code Coverage](https://scrutinizer-ci.com/g/index0h/yii2-phar/badges/coverage.png?s=53d2290e629cdc0a7f65e67e8c979cec9f94cfa2)](https://scrutinizer-ci.com/g/index0h/yii2-phar/) [![Total Downloads](https://poser.pugx.org/index0h/yii2-phar/downloads.png)](https://packagist.org/packages/index0h/yii2-phar) [![License](https://poser.pugx.org/index0h/yii2-phar/license.png)](https://packagist.org/packages/index0h/yii2-phar)\r\n\r\nThis module provides console interface for building PHAR archives for Yii2 applications.\r\n\r\n## Installation\r\n\r\nThe preferred way to install this extension is through [composer](http://getcomposer.org/download/).\r\n\r\n```sh\r\nphp composer.phar require --prefer-dist index0h/yii2-phar \"*\"\r\n```\r\n\r\nor add line to require section of `composer.json`\r\n\r\n```json\r\n\"index0h/yii2-phar\": \"*\"\r\n```\r\n\r\n## Standalone usage\r\n\r\n* Installation\r\n\r\n```sh\r\nphp composer.phar global require index0h/yii2-phar:*\r\n```\r\n\r\n* Running\r\n\r\n```sh\r\nyii2-phar\r\n# Or with external configuration\r\nyii2-phar phar/build myConfiguration.php\r\n```\r\n\r\n## Usage\r\n\r\nOnce module is installed, modify your application configuration as follows:\r\n\r\n```php\r\nreturn [\r\n    'modules' => [\r\n        'phar' => 'index0h\\\\phar\\\\Module',\r\n        ...\r\n    ],\r\n    ...\r\n];\r\n```\r\n\r\nYou can access to yii2-phar module though console:\r\n\r\n```sh\r\nyii phar/build\r\n```\r\n\r\n## Options\r\n\r\n* **compress** - Array of compress algorithms, \\Phar::GZ, \\Phar::BZ2. Creates compressed files of main phar.\r\n* **files** - List of files to compile.\r\n* **folders** - List of directories to compile.\r\n* **ignore** - List of regexp patterns that must be ignored on build. That means if any file will match to any of\r\n    patterns - it will be ignored.\r\n* **path** - Path to phar file save.\r\n* **pharName** - Phar name.\r\n* **signature** - One of [Phar signature algorithms](http://www.php.net/manual/en/phar.setsignaturealgorithm.php). If\r\n    it is Phar::OPENSSL - **openSSLPrivateKeyAlias** is required.\r\n* **openSSLPrivateKeyAlias** - Alias to OpenSSL certificate, should be on \\Phar::OPENSSL signature set.\r\n* **stub** - Alias to stub file, if false - will not be set.\r\n\r\n## Components\r\n\r\nComponents - php classes for files modifications in phar archives. For example: remove all whitespaces from php code.\r\nComponents configuration is just like yii Application components, for example:\r\n\r\n```php\r\nreturn [\r\n    'modules' => [\r\n        'phar' => [\r\n            'class' => 'index0h\\\\phar\\\\Module',\r\n            'components' => [\r\n                'fixer' => [\r\n                    'class' => 'index0h\\\\phar\\\\components\\\\php\\\\Fixer',\r\n                    'match' => '/.*\\.php/'\r\n                ]\r\n            ]\r\n        ]\r\n        ...\r\n    ],\r\n    ...\r\n];\r\n```\r\n\r\n### Available components\r\n\r\n#### Fixer\r\n\r\nFixer changes realpath functions in files that doesn't work in phar.\r\n\r\n* **match** - List of regexp for files that must be modified.\r\n* **replace** - Array of regexp for [`from` => `to`] for modifications in files.\r\n\r\n#### Minimize\r\n\r\nRemoves all whitespaces form php files by php_strip_whitespace.\r\n\r\n* **match** - List of regexp for files that must be modified.\r\n\r\n### Writing own component\r\n\r\nSimply create class that extends index0h\\phar\\base\\Component and implement processFile method.\r\n\r\nFor example minimize component:\r\n\r\n```php\r\nnamespace index0h\\phar\\components\\php;\r\n\r\nuse index0h\\phar\\base\\Component;\r\nuse index0h\\phar\\base\\FileEvent;\r\n\r\n/**\r\n * Removes whitespace and comments from php files.\r\n */\r\nclass Minimize extends Component\r\n{\r\n    /**\r\n     * For all php files without suffix Controller (because help command parses comments).\r\n     */\r\n    protected $match = ['/(?<!Controller)\\.php/us'];\r\n\r\n    /**\r\n     * Modification of file.\r\n     *\r\n     * @param FileEvent $event Event with file information.\r\n     */\r\n    public function processFile(FileEvent $event)\r\n    {\r\n        file_put_contents($event->realPath, php_strip_whitespace($event->realPath));\r\n    }\r\n}\r\n```\r\n\r\n#### FileEvent structure\r\n\r\n* realPath - path to temporary file.\r\n* relativePath - path in phar file.\r\n\r\n## Testing\r\n\r\n#### Run tests from IDE (example for PhpStorm)\r\n\r\n- Select Run/Debug Configuration -> Edit Configurations\r\n- Select Add New Configuration -> PHP Script\r\n- Type:\r\n    * File: /path/to/yii2-phar/.test.php\r\n    * Arguments run: run --coverage --html\r\n- OK\r\n\r\n#### Run tests from IDE (example for PhpStorm) `inside phar archive`\r\n\r\n- Select Run/Debug Configuration -> Edit Configurations\r\n- Select Add New Configuration -> PHP Script\r\n- Type:\r\n    * File: /path/to/yii2-phar/.test.phar.php\r\n    * Arguments run: run --no-exit\r\n- OK\r\n\r\n#### Run tests from console\r\n\r\n```sh\r\nmake test-all\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}